version: 2.1
orbs:
  ruby: circleci/ruby@1.1.2
  node: circleci/node@2
  heroku: circleci/heroku@0.0.10
jobs:
  build:
    docker:
      - image: circleci/ruby:2.7.2-node
    executor: ruby/default
    steps:
      - checkout # pull down our git code.
      - ruby/install-deps # use the ruby orb to install dependencies
      # use the node orb to install our packages
      # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
      # learn more: https://circleci.com/docs/2.0/caching/
      # - node/install-packages:
      #     pkg-manager: yarn
      #     cache-key: "yarn.lock"
  # test:  # our next job, called "test"
  #   # we run "parallel job containers" to enable speeding up our tests;
  #   # this splits our tests across multiple containers.
  #   # parallelism: 3
  #   # here we set TWO docker images.
  #   docker:
  #     - image: cimg/ruby:2.7.2-node # this is our primary docker image, where step commands run.
  #       auth:
  #         username: mydockerhub-user
  #         password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
  #     - image: circleci/postgres:9.5-alpine
  #       auth:
  #         username: mydockerhub-user
  #         password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
  #       environment: # add POSTGRES environment variables.
  #         POSTGRES_USER: pgapp
  #         POSTGRES_DB: pgapp_test
  #         POSTGRES_PASSWORD: ""
  #   # environment variables specific to Ruby/Rails, applied to the primary container.
  #   environment:
  #     # BUNDLE_JOBS: "3"
  #     # BUNDLE_RETRY: "3"
  #     PGHOST: 127.0.0.1
  #     PGUSER: pgapp
  #     PGPASSWORD: ""
  #     RAILS_ENV: test
  #   # A series of steps to run, some are similar to those in "build".
  #   steps:
  #     - checkout
  #     - ruby/install-deps
  #     # - node/install-packages:
  #     #     pkg-manager: yarn
  #     #     cache-key: "yarn.lock"
  #     # # Here we make sure that the secondary container boots
  #     # # up before we run operations on the database.
  #     - run:
  #         name: Wait for DB
  #         command: dockerize -wait tcp://localhost:5432 -timeout 1m
  #     - run:
  #         name: Database setup
  #         command: bundle exec rails db:schema:load --trace
  #     # Run rspec in parallel
  #     - ruby/rspec-test
  deploy:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - run:
          command: >
            echo "The command above installs Heroku, the command below deploys.
            What you do inbetween is up to you!"
      - heroku/deploy-via-git
      - run:
          name: Migrate db
          command: heroku run rake db:migrate --app $HEROKU_APP_NAME
    # machine:
    #     enabled: true
    # working_directory: ~/acebook-poke
    # environment:
    #   HEROKU_APP_NAME: $HEROKU_APP_NAME # define env var $HEROKU_APP
    # steps:
    #   - checkout
    #   - run: bash .circleci/setup-heroku.sh
    #   - add_ssh_keys:
    #       fingerprints:
    #         - $HEROKU_SSH_FINGERPRINT
    #   - deploy:
    #       name: deploy to Heroku if tests pass and branch is master
    #       command: |
    #         if [ "${CIRCLE_BRANCH}" == "master" ]; then
    #           git push --force https://git.heroku.com/$HEROKU_APP_NAME.git HEAD:refs/heads/master
    #           heroku run rake db:migrate
    #           sleep 5
    #           heroku restart
    #         fi
          # command: |
          #   heroku login
          #   $HEROKU_EMAIL
          #   heroku git:remote -a "gentle-beach-18739"
          #   git push heroku master
          #   heroku run rake db:migrate
          #   sleep 5 # sleep for 5 seconds to wait for dynos
          #   heroku restart
# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_test_deploy:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build
      # - test:         # Then run test,
          # requires:   # Test requires that build passes for it to run.
          #   - build
      - deploy:
          requires:
            - build
            # - test
      # - deploy:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: master
